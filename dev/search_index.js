var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SigmaShift","category":"page"},{"location":"#SigmaShift","page":"Home","title":"SigmaShift","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SigmaShift.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SigmaShift]","category":"page"},{"location":"#SigmaShift.SeaWaterDensity","page":"Home","title":"SigmaShift.SeaWaterDensity","text":"SeaWaterDensity(Θ,Σ,Π,Π0) from MITgcmTools.jl/PhysicalOceanography.jl, From Gael Forget\n\nCompute potential density (ρP), in situ density (ρI), and density referenced to PREF (Π0 in decibars) from potential temperature (Θ in °C), salinity (Σ in psu) and pressure (Π in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron\n\nReference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf\n\nCheck value: ρI = 1041.83267kg/m^3 for Θ=3°Celcius, Σ=35psu, Π=3000dbar\n\n(ρP,ρI,ρR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ρI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"#SigmaShift.dedup!-Tuple{Any, Any}","page":"Home","title":"SigmaShift.dedup!","text":"function dedup!(a,b)\n\nRemove values of a that are duplicates. Remove values of b that have the same location as the duplicates in a. The length of a and b should be identical before and after invoking this function. \n\nArguments\n\na::Vector{T}: a density variable\nb::Vector{T}: an accompanying tracer variable\n\nArguments are mutated by the function. \n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.dedupfirst!-Tuple{Any, Any}","page":"Home","title":"SigmaShift.dedupfirst!","text":"function dedup!(a,b)\n\nRemove the first duplicate of a. Remove the value of b that is located at the same entry as the first duplicate in a. The length of a and b should be identical before and after invoking this function. \n\nArguments\n\na::Vector{T}: a density variable\nb::Vector{T}: an accompanying tracer variable\n\nArguments are mutated by the function. \n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.mixinversions!-Tuple{Any, Any}","page":"Home","title":"SigmaShift.mixinversions!","text":"function mixinversions!(a,b)\n\nFor values of a that are not increasing,  an inversion is defined. Average these values of a until values of a are sorted. Do the same averaging on the accompanying vector b.\n\nArguments\n\na::Vector{T}: a density variable\nb::Vector{T}: an accompanying tracer variable\n\nArguments are mutated by the function. \n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.notnanorzero-Tuple{Any}","page":"Home","title":"SigmaShift.notnanorzero","text":"function notnanorzero\n\n true is argument is not a NaN nor zero\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.sigma0column-Tuple{Any, Any, Any}","page":"Home","title":"SigmaShift.sigma0column","text":"function sigma0column(θ,S,p)\nσ₀ for a water column\nUntested for a mix of float values\n\nArguments\n\nθz::Vector{T}: potential temperature\nSz::Vector{T}: practical salinity\npz::Vector{T}: vertical profile of standard pressures\n\nOutput\n\nσ₀:  sigma-0 for wet points in column\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.sigma1column-Tuple{Any, Any, Any}","page":"Home","title":"SigmaShift.sigma1column","text":"function sigma1column(θ,S,p)\nσ₁ for a water column\nUntested for a mix of float values\n\nArguments\n\nθz::Vector{T}: potential temperature\nSz::Vector{T}: practical salinity\npz::Vector{T}: vertical profile of standard pressures\n\nOutput\n\nσ₁:  sigma-1 for wet points in column\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.sigma1grid-Tuple{}","page":"Home","title":"SigmaShift.sigma1grid","text":"function sigma1grid()     Standard (from Susan Wijffels, WHOI) choice of sigma1 surfaces\n\nArguments\n\nz: value\n\nOutput\n\nσ₁grid: list (vector) of σ₁ values\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.sigma2column-Tuple{Any, Any, Any}","page":"Home","title":"SigmaShift.sigma2column","text":"function sigma2column(θ,S,p)\nσ₂ for a water column\nUntested for a mix of float values\n\nArguments\n\nθz::Vector{T}: potential temperature\nSz::Vector{T}: practical salinity\npz::Vector{T}: vertical profile of standard pressures\n\nOutput\n\nσ₂:  sigma-2 for wet points in column\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.sigmacolumn-Union{Tuple{T}, Tuple{T2}, Tuple{Vector{T}, Vector{T}, Vector{T2}, Integer}} where {T2<:AbstractFloat, T<:AbstractFloat}","page":"Home","title":"SigmaShift.sigmacolumn","text":"function sigmacolumn(θ,S,p,p0)\nσ for a water column\n\nArguments\n\nθz::Vector{T}: potential temperature\nSz::Vector{T}: practical salinity\npz::Vector{T}: vertical profile of standard pressures\np0::Integer: reference pressure\n\nOutput\n\nσ::Vector{T}:  sigma for wet points in column\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.var2sigmacolumn-Union{Tuple{T}, Tuple{T2}, Tuple{Vector{T}, Any, Any, Integer}, Tuple{Vector{T}, Any, Any, Integer, Any}} where {T2<:AbstractFloat, T<:AbstractFloat}","page":"Home","title":"SigmaShift.var2sigmacolumn","text":"function var2sigmacolumn(σ,v,σ₁grid,splorder)\nmap θ,S, p onto σ₁ surfaces for a water column\n\nArguments\n\nσ::Array{Float,1}}`: sigma values of input variable\nv::Array{Float,1}}: variable of interest\nsig1: σ surface values\nsplorder: 1-5, order of spline\nlinearinterp: optional argument, true to force linear interpolation\n\nOutput\n\nθonσ: variable on sig1 sigma surfaces\n\n\n\n\n\n","category":"method"},{"location":"#SigmaShift.vars2sigma1-Union{Tuple{T}, Tuple{Dict{String, Array{T, 3}}, Vector{T}, Vector{T}, Integer}, Tuple{Dict{String, Array{T, 3}}, Vector{T}, Vector{T}, Integer, Any}} where T<:AbstractFloat","page":"Home","title":"SigmaShift.vars2sigma1","text":"function vars2sigma1(vars,p,sig1grid,γ,spline_order)\nmap variables from regular 3D grid onto sigma1 surfaces\n\nArguments\n\nvars::Dict{String,Array{T,3}}}: dict of 3d arrays\np::Array{T,1} : vertical profile of standard pressures\nsig1grid: σ₁ surface values\nγ: grid description needed for preallocation\nsplorder: 1-5, order of spline\n\nOutput\n\nvarsσ::Dict{String,Array{T,3}: dict of 3d arrays of variables on sigma1 surfaces\n\n\n\n\n\n","category":"method"}]
}
